---
title: "Terceiro Dia - Manipulando dados e gerando gráficos"
author: "Pedro Cavalcante"
date: "20 de fevereiro de 2019"
output: html_document
---

Agora vamos conhecer dois pacotes do Tidyverse, uma coleção de pacotes com uma filosofia em comum de programação simples e legível. Ele não lhe é totalmente estranha. Ontem usamos alguns pacotes desses pacotes, como ``readr``, ``haven`` e ``readxl``, todos focados em importar dados. Agora é a hora de manipula-los com o ``dplyr`` e gerar visualizações de alta qualidade com o ``ggplot2``.

# Manipulação de dados com do ``dplyr``

Você já observou que no R quando precisamos várias funções, empilhamos elas umas dentro das outras? Normalmente não é assim que estruturamos frases nem pensamos, então é uma maneira pouco intuitiva de escrever comandos. O ``dplyr`` traz, além de algumas funções úteis que veremos mais à frente, o operador ``%>%``, que chamamos de _pipe_. Ele "engata" funções umas nas outras. Por exemplo, lembra de quando definimos uma semente aleatória usando a data e hora em que o programa roda?

```{R}
set.seed(as.numeric(Sys.time()))
```

Usando pipes, esse mesmo código ficaria:

```{R, message = FALSE, warning = FALSE}
library(dplyr)

Sys.time() %>%
  as.numeric() %>%
   set.seed()

### pular linhas é opcional

Sys.time() %>% as.numeric() %>% set.seed()
```

Na sessão anterior definimos uma amostra de uma variável aleatória $X$ e além de obter estatísticas descritivas também rodamos um teste de Shapiro-Wilk. O código era assim:

```{R, eval = FALSE}

X = rnorm(n = 2000,
          mean = 2,
          sd = sqrt(8))

sd(X) # desvio-padrão dos dados
var(X) # variância dos dados
mean(X) # média dos dados
sample(X, size = 7) # 7 elementos aleatoriamente escolhidos de X

shapiro.test(X) # teste de Shapiro-Wilk de normalidade de dados

```

Com pipes ele ficaria assim:

```{R, eval = FALSE}
X = rnorm(n = 2000,
          mean = 2,
          sd = sqrt(8))

X %>% sd()
X %>% var()
X %>% mean()
X %>% sample(7)
X %>% shapiro.test()

```

Há quem prefira escrever com pipes algumas linhas - em particular as com muitas funções juntas - porque torna o código mais legível. É mais intuitivo ler um comando como uma sequência de instruções engatadas, pelo menos em comparação com funções empilhadas. 

Outro uso muito comum do ``dplyr`` é gerar bases de dados derivadas de outras. A função ``group_by()`` por exemplo nos permite agrupar os dados com base em alguma variável. ``summarise()`` permite criação de variáveis novas que dependem de outras já contidas na base original. ``filter()`` nos permite filtrar

Para ilustrar essas funcionalidades vamos usar dados da base Penn World Tables 9.0 com vários agregados macroeconômicos. É bom ler a documentação da base sempre que for usar, mas adianto que as variáveis ``csh_`` informam parcela do PIB em um componente específico da Demanda Agregada. Vamos montar uma nova base com dados agrupados do mundo, por década, mostrando como evoluiu a participação média do governo e do setor externo nas economias do mundo. 

```{R}
library(pwt9)

data("pwt9.0")


# primeiro criaremos uma variável com a década da observação
pwt9.0$decada = ifelse(pwt9.0$year - 1900 < 60, "50", 
                       ifelse(pwt9.0$year - 1900 < 70, "60",
                        ifelse(pwt9.0$year - 1900 < 80, "70",
                         ifelse(pwt9.0$year - 1900 < 90, "80",
                          ifelse(pwt9.0$year - 1900 < 100, "90",
                           ifelse(pwt9.0$year - 1900 < 110, "00", "10")))))) %>% factor()

expor_governo = pwt9.0 %>% 
                  group_by(decada) %>%
                  summarise(Governo = mean(csh_g, na.rm = TRUE),
                            Exportacoes = mean(csh_x, na.rm = TRUE))

print(expor_governo)

```


# Gráficos com o ``ggplot2``

É bom pensar no ``ggplot2`` como uma "grámatica dos gráficos". A ideia fundamental do pacote - que é completamente diferente de qualquer outro pacote para fazer gráficos no R - é que toda visualização tem os mesmos componentes: dados, um sistema de coordenadas e marcações visuais que representam os pontos que vamos chamar de _geoms_. 

A sintaxe do pacote é um tanto quanto única, mas reflete muito bem a filosofia por trás do software. Começamos adicionado dados e uma camada - que chamaremos de estética - para depois adicionar marcas visuais.

A função ``ggplot()`` recebe sempre uma entrada com a função ``aes()`` (abreviação de _estética_, em inglês) e isso gera a estética geral do gráfico. 


```{R}
data(iris) # carregando os dados de flores
library(ggplot2)

iris %>%
  ggplot(aes(x = Petal.Length, y = Petal.Width))

```

Agora informamos como queremos marcar visualmente os dados que dissemos pertencerem ao gráfico. Usamos um sinal ``+`` para isso e para deixar o código mais legível é sempre bom pular uma linha. A maioria dos objetos que usaremos são _geoms_. Para essa visualização, basta usar ``geom_point()``.

```{R}
iris %>%
  ggplot(aes(x = Petal.Length, y = Petal.Width)) +
  geom_point()

```

Podemos customizar com certo detalhamento o gráfico.

```{R}
iris %>%
  ggplot(aes(x = Petal.Length, y = Petal.Width)) +
  geom_point(color = "blue")

```

E mais, podemos usar outras variáveis do DataFrame que alimentamos ao gráfico! O ``ggplot2`` lida muito bem com variáveis que são fatores para esses fins, então se lembre se tornar esse tipo de variável um fator sempre que possível.

```{R}
iris %>%
  ggplot(aes(x = Petal.Length, y = Petal.Width, color = Species)) +
  geom_point()

```

Existem outras diferenciações visuais além de cor, como formato e transparência. Usamos para essas atribuições os argumentos ``shape=`` e ``alpha=`` respectivamente.

```{R, warning = FALSE}
iris %>%
  ggplot(aes(x = Petal.Length, y = Petal.Width, shape = Species)) +
  geom_point()

iris %>%
  ggplot(aes(x = Petal.Length, y = Petal.Width, alpha = Species)) +
  geom_point()


```

Via de regra, associar uma variável à transparência é interessante quando a variável é contínua, não discreta.

Note que é possível escrever códigos diferentes que resultem no mesmo gráfico, em particular se você alterar em que função informa a estética do gráfico. Um truque é que normalmente quando serão exibidas várias variáveis é mais interessante informar estética por estética. Quando só uma será exibida, então na primeira estética o eixo vertical pode ser informado sem problemas.

```{R}

iris %>%
  ggplot(aes(x = Species, y = Petal.Length)) +
  geom_boxplot()

iris %>%
  ggplot(aes(x = Species)) +
  geom_boxplot(aes(y = Petal.Length)) 
  
iris %>%
  ggplot(aes(x = Species)) +
  geom_boxplot(aes(y = Petal.Length)) +
  geom_boxplot(aes(y = Petal.Width))

```

Para produzir histogramas, devemos focar em dois argumentos importantes e substitutos, ``bins=`` e ``binwidth=``. Ao definir o primeiro, defini-se uma quantidade fixa de barras do histograma e a largura delas se ajeita. Definindo o segundo, temos um processo contrário.

Escolher um número certo é mais arte que ciência. É sempre recomendado explorar um pouco opções diferentes e evitar tanto histogramas muito "quebrados", com grandes espaços vazios, quanto histogramas muito "unidos", que preenchem boa parte do gráfico sem informar muito sobre a distribuição dos dados.


```{R}
iris %>%
  ggplot(aes(x = Petal.Length)) +
  geom_histogram()


iris %>%
  ggplot(aes(x = Petal.Length)) +
  geom_histogram(bins = 15)

iris %>%
  ggplot(aes(x = Petal.Length)) +
  geom_histogram(bins = 45)


```

Vamos agora expandir um pouco a nossa base de dados e nosso vocabulário com ``ggplot2``. ``xlab()`` e ``ylab()`` dão as legendas de cada eixo. ``labs()`` permite títulos para outros objetos como o título do gráfico e legenda, basta especificar em cada argumento apropriado. ``title=`` para o título, ``col=`` para a legenda do código de cores do gráfico, ``caption=`` para a legenda.

Note que gráficos em ``ggplot2`` são extremamente modulares. Basta adicionar camadas. 


```{R, warning = FALSE}
prouni = readRDS("prouni.Rds")

prouni %>%
  ggplot(aes(x = mensalidade, y = nota_integral_ampla, 
             color = Medicina, show.legend = FALSE)) +
  geom_point() +
  xlab("Mensalidade do curso no ProUni") +
  ylab("Nota de Corte do curso no ProUni") +
  labs(title = "Relação entre nota de corte e mensalidade no ProUni",
       col = "Medicina",
       caption = "Fonte: Inep/MEC")

```

Uma alternativa ao ``geom_point()`` é usar o ``geom_smooth()`` que exibe um polinômio estimado com os dados.

```{R, warning = FALSE, message = FALSE}

prouni %>%
  ggplot(aes(x = mensalidade, y = nota_integral_ampla)) +
  geom_smooth() +
  xlab("Mensalidade do curso no ProUni") +
  ylab("Nota de Corte do curso no ProUni") +
  labs(title = "Relação entre nota de corte e mensalidade no ProUni",
       caption = "Fonte: Inep/MEC")


prouni %>%
  ggplot(aes(x = mensalidade, y = nota_integral_ampla, 
             color = Medicina, show.legend = FALSE)) +
  geom_smooth() +
  xlab("Mensalidade do curso no ProUni") +
  ylab("Nota de Corte do curso no ProUni") +
  labs(title = "Relação entre nota de corte e mensalidade no ProUni",
       col = "Medicina",
       caption = "Fonte: Inep/MEC")
```

Dois _geoms_ razoavelmente comuns não foram cobertos aqui, ``geom_bar()`` para gráficos de barras e ``geom_line()`` para gráficos de linhas. Usar esses _geoms_ é um procedimento igual ao dos anteriores.


## ``ggplot2`` e funções estatísticas

O ambiente do ``ggplot2`` é fantasticamente flexível em boa parte porque todo _geom_ tem associado a si um _stat_, alguma função estatística. Por exemplo, por padrão o ``geom_histogram()`` devolve a contagem dos elementos, mas podemos facilmente fazer ele devolver a densidade dos dados. E mais, podemos usar o ``stat_functio()`` para plotar a _verdadeira_ função de densidade dos dados.

Vamos gerar dados aleatórios e ilustrar isso.

```{R}
set.seed(1234)

dados = data.frame(X = rnorm(3000)) # dados tem distribuição normal padrão

dados %>%
  ggplot(aes(x = X)) +
  geom_histogram()

dados %>%
  ggplot(aes(x = X)) +
  geom_histogram(aes(y = ..density..))

dados %>%
  ggplot(aes(x = X)) +
  geom_histogram(aes(y = ..density..)) + 
  stat_function(fun = dnorm, size = 2)

dados2 = data.frame(x = rexp(3000, rate = 5))

dados2 %>%
  ggplot(aes(x = x)) +
  geom_histogram(aes(y = ..density..)) +
  stat_function(fun = dexp, 
                args = list(rate = 5), 
                size = 2)

```

# Modularidade do ``ggplot2``

``ggplot2`` é um pacote tão flexível porque implementa uma _gramática_ comum a toda e qualquer visualização, por isso existem *dezenas* de extensões ao ``ggplot2`` para gerar grafos, trabalhar com séries temporais, mapas, dados de radar, animações, árvores evolucionárias, redes e o que quer que venha à mente. A lista completa pode ser encontrada no site oficial do pacote: https://www.ggplot2-exts.org/.

# Exercícios

* Com pipes e funções do ``dplyr`` encontre a média de mensalidade e de nota de corte para cursos por estado
* Abra a base de dados ``mtcars``, transforme ``cyl`` em um fator e faça gráficos de dispersão com variáveis à sua escolha de forma que (i) a cor dos pontos dependa de ``cyl`` e (ii) a forma dos pontos dependa de ``cyl``.
* Ainda com a base ``mtcars``, faça um gráfico de dispersão entre ``disp`` e ``hp`` de forma que a transparência dos pontos seja uma função de quantas milhas por galão de combustível o carro faz. Leia a documentação da base para descobrir qual variável é.
* Gere 4 gráficos, cada um de amostras com n igual a 100, 1000, 2000 e 5000 de alguma variável aleatória, com um histograma da amostra e a função da densidade da distribuição. Use a biblioteca ``gridExtra`` para juntar os 4 gráficos em uma visualização só. Essa questão é um pouco mais difícil do que as outras, mas qualquer dúvida que você tenha certamente já foi resolvida no StackOverflow ou está coberta pela documentação do pacote.



