---
title: "Segundo Dia - Importando e Simulando Dados"
author: "Pedro Cavalcante"
date: "20 de fevereiro de 2019"
output: html_document
---

Agora que cobrimos a sintaxe básica e sabemos conversar com o R, podemos realmente *fazer* coisas. Hoje o foco será em obter dados. Vamos aprender a importar dados de fontes variadas, baixar da internet e cobrir alguns pacotes que baixam dados estruturados de fontes como o Sistema Gerador de Séries do Banco Central do Brasil, Datasus e o Sidra do IBGE. Depois vamos aprender a gerar dados que seguem distribuições probabilísticas e estimar distribuições com dados reais.

# Importando dados

Antes de prosseguirmos é importante garantir que todas as bases de exemplos estejam baixadas e juntas numa pasta só para evitar confusões e facilitar nosso trabalho. Mais ainda, é bom garantir que essa pasta seja a pasta de trabalho com a função ``setwd()``. Para descobrir a pasta de trabalho atual e/ou verificar se está tudo certo, basta rodar ``getwd()``.

A maior parte dos formatos de dados é coberto pelo pacote ``readr``, então tenha-o instalado em sua máquina e carregado antes de prosseguir.

## Dados Delimitados e NAs

Dados delimitados são relativamente comuns. Arquivos assim contém entradas separadas por caracteres específicos. É comum que esses caracteres sejam um espaço, uma vírgula ou um ponto-e-vírgula. 

É também comum que algumas observações não estejam completas, esse tipo de entrada vazia é chamado de NA pelo R. Como muitas organizações usam códigos específicos para entradas vazias - como por exemplo 999999999999 pelo IBGE na Pesquisa Nacional de Amostra Domiciliar - vamos também aprender como fazer o R ler essas entradas como faltantes.

A função ``readr::read_delim`` lê esse tipo de dado, basta dizermos no argumento ``delim =`` qual caractere é o delimitador. Lembre-se sempre de explorar o arquivo após a leitura para verificar se está tudo em ordem. Para isso é comum usar a função ``head()``.

```{R}

library(readr)
alturas = read_delim("alturas.txt", 
                     delim = " ")

head(alturas)

```

Observe que o R leu duas pessoas com altura 999cm e idade 999 anos. Isso certamente é um código para dado faltante, então precisamos reler o arquivo, agora levando isso em conta.

```{R}

library(readr)
alturas = read_delim("alturas.txt", 
                     delim = " ",
                     na = "999")

head(alturas)

```

Agora sim temos uma leitura limpa dos dados.

## Dados de Stata (.dta), Separados por Vírgula (.csv) e de Excel (.xlsx)

O processo é muito similar ao de dados delimitados. O arquivo ``ministerios.xlsx`` contém dados de gastos ministeriais brasileiros e para lê-lo vamos usar o pacote ``readxl``. Os arquivos da forma ``prouni.xxx`` contém dados a nível de curso do ProUni de 2017. 

Vale lembrar que cada versão do Stata tem um padrão diferente para arquivos de dados apesar de todos serem da mesma extensão ``.dta``. Para especificar a versão, basta usar o argumento ``version =`` da função ``haven::read_dta``. Por padrão, a versão a ser lida é a 14, mas atualmente todas entre a 8 e a 15 são permitidas. 

```{R}

library(readxl) # para dados de Excel
library(haven) # para dados de Stata

ministerios = read_xlsx("ministerios.xlsx")
head(ministerios)

prouni = read_dta("prouni.dta")
head(prouni)

prouni = read_csv2("prouni.csv")
head(prouni)


```

## Formatos específicos do R

A linguagem R tem duas extensões de dados, ``.Rdata`` e ``.Rds``. Ambas são muito úteis porque geram arquivos bem mais leves para um mesmo volume de dados que vários outros formatos populares. ``.Rdata`` serve para armazenar vários objetos de R - como por exemplo todo o seu ambiente de trabalho - e ``.Rds`` para um único objeto. Usamos as funções ``readRDS()`` para ler arquivos dessa extensão e ``writeRDS()`` para salvar arquivos. 

```{R}
prouni = readRDS("prouni.Rds")
head(prouni)

```

## Dados da Internet

### De links Diretos

Uma ferramenta muito boa em R são arquivos temporários. Eles podem ser usados para diversos fins e baixar arquivos diretamente de links dados é um dos mais interessantes. Esse método envolve certa "malícia" de localizar um link correto de download. Não basta propriamento informar a URL de uma página que contenha o link de download do arquivo, precisamos informar o link em si.

Depois de localizado o link para o download do arquivo, o procedimento que normalmente funciona é clicar com o botão direito e depois em "Copiar o Endereço do Link". Esse endereço é o que usaremos.

!["View Raw" no Github](https://i.imgur.com/w1gdU5j.png)

![Copiando o endereço do link de uma página da AER](https://i.imgur.com/HfxAj3y.png)

O procedimento é razoavelmente simples. Primeiro definimos um arquivo temporário com a função ``tempfile()``, depois baixamos o arquivo usando a função ``download.file()`` - cuidado ao alterar o parâmetro ``mode=``, ele é um tanto quanto imprevisível - e depois lemos com a função apropriada o arquivo baixado. Como estamos baixando um arquivo em extensão ``.rds``, devemos usar ``readRDS()``.

```{R}
link = "https://github.com/danmrc/azul/blob/master/content/post/cox_rais/acre_rais_2017.Rds?raw=true"

temporario = tempfile()
download.file(link, destfile = temporario, mode = "wb")

RAIS_acre = readRDS(temporario)
head(RAIS_acre)

```



### De Pacotes

Vários pacotes de R trazem funcionalidades para importar dados de maneira mais simples, vamos cobrir alguns aqui.

#### Brazilian Economic Time Series (BETS)

o BETS extrai séries diretamente do SGS/BCB, basta alimentar um código específico da série. A função ``BETSsearch()`` permite fazer buscas, mas o código também pode ser manualmente localizado no site do SGS: https://www3.bcb.gov.br/sgspub/localizarseries/localizarSeries.do?method=prepararTelaLocalizarSeries. 

Como spoiler: o código da série de variação mensal do IPCA é 433. Vamos importar uma série e gerar um gráfico. Não se preocupe se você ainda não sabe fazer gráficos no R. Vamos ver isso no próximo encontro - e aprenderemos a fazer gráficos muito mais bonitos.


```{R}

library(BETS)
BETSsearch(description = "ipca")

ipca = BETSget(433)
plot(ipca, 
     main = "Variação Mensal do IPCA, 1980-2019", 
     ylab = "%",
     xlab = "Ano")

```

#### ElectionsBR

O pacote ``electionsBR`` traz ferramentas para importar dados eleitorais do repositório do TSE. É uma boa ideia olhar a documentação do pacote porque cada tipo de eleição tem uma função própria. Como exemplo vou usar ``president_mun_vote()`` para baixar dados de eleição presidencial a nível de municípios.

```{R}
library(electionsBR)

presidente = president_mun_vote(year = 2010)
head(presidente)

```

#### Outros pacotes

À essa altura espero que você já tenha entendido um pouco o espírito da coisa, então vou deixar uma lista pequena de outros pacotes úteis para importar dados.

* [Quandl](https://www.quandl.com/tools/r) é ótimo para importar dados financeiros.
* [datasus, da Daniela Petruzalek](https://github.com/danicat/datasus). Existem vários pacotes com esse mesmo nome e propósito, mas o da Daniela me pareceu o melhor e mais funcional.
* [microdadosBrasil](https://github.com/lucasmation/microdadosBrasil) importa e trata varios microdados brasileiros como Censo, PNAD, RAIS e Censo do Ensino Superior.
* [BatchGetSymbols](https://cran.r-project.org/web/packages/BatchGetSymbols/BatchGetSymbols.pdf) ajuda muito a lidar com dados financeiros e importa-los corretamente. 
* [quantmod](https://www.quantmod.com/) disponibiliza um ambiente para construção de modelos e cenários, outro muito útil para lidar com dados financeiros.


# Simulando dados


